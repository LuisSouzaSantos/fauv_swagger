swagger: "2.0"
info:
  description: "APIs to the FAUV Analyzer Application"
  version: "12.0.0"
  title: "FAUV"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "fauv.com.br"
basePath: "/v1.0"
tags:
- name: "Application Access Control"
  description: "APIs to define login and register"
- name: "User"
  description: "User APIs"
- name: "Equipment"
  description: "Equipment APIs"
- name: "Unit"
  description: "Unit APIs"
- name: "Car"
  description: "Car APIs"
- name: "Model"
  description: "Model APIs"
- name: "Sample"
  description: "Sample APIs"
- name: "Employee"
  description: "Employee APIs"
schemes:
- "https"
paths:
  /accessControl/login:
    post:
      tags:
      - "Application Access Control"
      summary: "Validate and tokenize the user to make requests"
      operationId: "performLogin"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Perform login into the application"
        required: true
        schema:
          $ref: "#/definitions/LoginForm"
      responses:
        "401":
          description: "UNAUTHORIZED"
          schema:
            $ref: "#/definitions/ApiResponseError"
        "403":
          description: "FORBIDDEN"
          schema:
            $ref: "#/definitions/ApiResponseError"
        "500":
          description: "SERVER ERROR"
          schema:
            $ref: "#/definitions/ApiResponseError"
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/AuthenticationDTO"
  /accessControl/register:
    post:
      tags:
      - "Application Access Control"
      summary: "Request user access"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Request access to the application"
        required: true
        schema:
          $ref: "#/definitions/UserForm"
      responses:
        "500":
          description: "SERVER ERROR"
          schema:
            $ref: "#/definitions/ApiResponseError"
        "200":
          description: "OK"
  /user:
    post:
      tags:
      - "User"
      summary: "Create an user by system admin"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/UserForm"
      responses:
        "401":
          description: "UNAUTHORIZED"
          schema:
            $ref: "#/definitions/ApiResponseError"
        "403":
          description: "FORBIDDEN"
          schema:
            $ref: "#/definitions/ApiResponseError"
        "500":
          description: "SERVER ERROR"
          schema:
            $ref: "#/definitions/ApiResponseError"
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/UserDTO"
    put:
      tags:
      - "User"
      summary:  "Update an user"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/UserDTO"
      responses:
        "401":
          description: "UNAUTHORIZED"
          schema:
            $ref: "#/definitions/ApiResponseError"
        "403":
          description: "FORBIDDEN"
          schema:
            $ref: "#/definitions/ApiResponseError"
        "500":
          description: "SERVER ERROR"
          schema:
            $ref: "#/definitions/ApiResponseError"
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/UserDTO"
    get:
      tags:
      - "User"
      summary:  "get all users"
      produces:
      - "application/json"
      responses:
        "401":
          description: "UNAUTHORIZED"
          schema:
            $ref: "#/definitions/ApiResponseError"
        "403":
          description: "FORBIDDEN"
          schema:
            $ref: "#/definitions/ApiResponseError"
        "500":
          description: "SERVER ERROR"
          schema:
            $ref: "#/definitions/ApiResponseError"
        "200":
          description: "OK"
          schema:
            items:
              type: "array"
              $ref: "#/definitions/UserDTO"
  /user/{id}:
    get:
      tags:
      - "User"
      summary:  "get an user by id"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "unit id"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "401":
          description: "UNAUTHORIZED"
          schema:
            $ref: "#/definitions/ApiResponseError"
        "403":
          description: "FORBIDDEN"
          schema:
            $ref: "#/definitions/ApiResponseError"
        "500":
          description: "SERVER ERROR"
          schema:
            $ref: "#/definitions/ApiResponseError"
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/UserDTO"
  /user/password:
    post:
      tags:
      - "User"
      summary:  "Update User password"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/PasswordDTO"
      responses:
        "401":
          description: "UNAUTHORIZED"
          schema:
            $ref: "#/definitions/ApiResponseError"
        "403":
          description: "FORBIDDEN"
          schema:
            $ref: "#/definitions/ApiResponseError"
        "500":
          description: "SERVER ERROR"
          schema:
            $ref: "#/definitions/ApiResponseError"
        "200":
          description: "OK"
  /unit:
    post:
      tags:
      - "Unit"
      summary:  "Create an unit"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/UnitForm"
      responses:
        "401":
          description: "UNAUTHORIZED"
          schema:
            $ref: "#/definitions/ApiResponseError"
        "403":
          description: "FORBIDDEN"
          schema:
            $ref: "#/definitions/ApiResponseError"
        "500":
          description: "SERVER ERROR"
          schema:
            $ref: "#/definitions/ApiResponseError"
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/UnitDTO"
    put:
      tags:
      - "Unit"
      summary:  "Update an unit"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/UnitDTO"
      responses:
        "401":
          description: "UNAUTHORIZED"
          schema:
            $ref: "#/definitions/ApiResponseError"
        "403":
          description: "FORBIDDEN"
          schema:
            $ref: "#/definitions/ApiResponseError"
        "500":
          description: "SERVER ERROR"
          schema:
            $ref: "#/definitions/ApiResponseError"
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/UnitDTO"
    get:
      tags:
      - "Unit"
      summary:  "get all units"
      produces:
      - "application/json"
      responses:
        "500":
          description: "SERVER ERROR"
          schema:
            $ref: "#/definitions/ApiResponseError"
        "200":
          description: "OK"
          schema:
            items:
              type: "array"
              $ref: "#/definitions/UnitDTO" 
  /unit/{id}:
    get:
      tags:
      - "Unit"
      summary:  "get an unit by id"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "unit id"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "401":
          description: "UNAUTHORIZED"
          schema:
            $ref: "#/definitions/ApiResponseError"
        "403":
          description: "FORBIDDEN"
          schema:
            $ref: "#/definitions/ApiResponseError"
        "500":
          description: "SERVER ERROR"
          schema:
            $ref: "#/definitions/ApiResponseError"
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/UnitDTO"   
  /equipment:
    post:
      tags:
      - "Equipment"
      summary:  "Create an equipment"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/EquipmentForm"
      responses:
        "401":
          description: "UNAUTHORIZED"
          schema:
            $ref: "#/definitions/ApiResponseError"
        "403":
          description: "FORBIDDEN"
          schema:
            $ref: "#/definitions/ApiResponseError"
        "500":
          description: "SERVER ERROR"
          schema:
            $ref: "#/definitions/ApiResponseError"
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/EquipmentDTO"
    put:
      tags:
      - "Equipment"
      summary:  "Update an equipment"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Request user accessn"
        required: true
        schema:
          $ref: "#/definitions/EquipmentFormWithId"
      responses:
        "500":
          description: "SERVER ERROR"
          schema:
            $ref: "#/definitions/ApiResponseError"
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/EquipmentDTO"
    get:
      tags:
      - "Equipment"
      summary:  "get all equipment"
      produces:
      - "application/json"
      responses:
        "500":
          description: "SERVER ERROR"
          schema:
            $ref: "#/definitions/ApiResponseError"
        "200":
          description: "OK"
          schema:
            items:
              type: 'array'
              $ref: "#/definitions/EquipmentDTO"
  /equipment/{id}:
    get:
      tags:
      - "Equipment"
      summary:  "get an equipment by id"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "equipment id"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "401":
          description: "UNAUTHORIZED"
          schema:
            $ref: "#/definitions/ApiResponseError"
        "403":
          description: "FORBIDDEN"
          schema:
            $ref: "#/definitions/ApiResponseError"
        "500":
          description: "SERVER ERROR"
          schema:
            $ref: "#/definitions/ApiResponseError"
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/EquipmentDTO"
  /car:
    post:
      tags:
      - "Car"
      summary:  "Create a car"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/CarForm"
      responses:
        "401":
          description: "UNAUTHORIZED"
          schema:
            $ref: "#/definitions/ApiResponseError"
        "403":
          description: "FORBIDDEN"
          schema:
            $ref: "#/definitions/ApiResponseError"
        "500":
          description: "SERVER ERROR"
          schema:
            $ref: "#/definitions/ApiResponseError"
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/CarDTO"
    put:
      tags:
      - "Car"
      summary:  "Update a car"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/CarDTO"
      responses:
        "401":
          description: "UNAUTHORIZED"
          schema:
            $ref: "#/definitions/ApiResponseError"
        "403":
          description: "FORBIDDEN"
          schema:
            $ref: "#/definitions/ApiResponseError"
        "500":
          description: "SERVER ERROR"
          schema:
            $ref: "#/definitions/ApiResponseError"
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/CarDTO"
    get:
      tags:
      - "Car"
      summary:  "get all cars"
      produces:
      - "application/json"
      responses:
        "500":
          description: "SERVER ERROR"
          schema:
            $ref: "#/definitions/ApiResponseError"
        "200":
          description: "OK"
          schema:
            items:
              type: "array"
              $ref: "#/definitions/CarDTO"
  /car/{id}:
    get:
      tags:
      - "Car"
      summary:  "get a car by id"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "car id"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "401":
          description: "UNAUTHORIZED"
          schema:
            $ref: "#/definitions/ApiResponseError"
        "403":
          description: "FORBIDDEN"
          schema:
            $ref: "#/definitions/ApiResponseError"
        "500":
          description: "SERVER ERROR"
          schema:
            $ref: "#/definitions/ApiResponseError"
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/CarDTO"
  /model:
    post:
      tags:
      - "Model"
      summary:  "Create a model"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/ModelForm"
      responses:
        "401":
          description: "UNAUTHORIZED"
          schema:
            $ref: "#/definitions/ApiResponseError"
        "403":
          description: "FORBIDDEN"
          schema:
            $ref: "#/definitions/ApiResponseError"
        "500":
          description: "SERVER ERROR"
          schema:
            $ref: "#/definitions/ApiResponseError"
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/ModelDTO"
    put:
      tags:
      - "Model"
      summary:  "Update a model"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/ModelDTO"
      responses:
        "401":
          description: "UNAUTHORIZED"
          schema:
            $ref: "#/definitions/ApiResponseError"
        "403":
          description: "FORBIDDEN"
          schema:
            $ref: "#/definitions/ApiResponseError"
        "500":
          description: "SERVER ERROR"
          schema:
            $ref: "#/definitions/ApiResponseError"
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/ModelDTO"
    get:
      tags:
      - "Model"
      summary:  "get all models"
      produces:
      - "application/json"
      responses:
        "500":
          description: "SERVER ERROR"
          schema:
            $ref: "#/definitions/ApiResponseError"
        "200":
          description: "OK"
          schema:
            items:
              type: "array"
              $ref: "#/definitions/ModelDTO" 
  /model/{id}:
    get:
      tags:
      - "Model"
      summary:  "get a model by id"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "mode id"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "401":
          description: "UNAUTHORIZED"
          schema:
            $ref: "#/definitions/ApiResponseError"
        "403":
          description: "FORBIDDEN"
          schema:
            $ref: "#/definitions/ApiResponseError"
        "500":
          description: "SERVER ERROR"
          schema:
            $ref: "#/definitions/ApiResponseError"
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/ModelDTO"
  /model/preview:
   post:
      tags:
      - "Model"
      summary:  "Preview a model"
      consumes:
        - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
        - in: "formData"
          name: "dmoFile"
          type: "file"
          description: "DMO file to upload."
        - in: "formData"
          name: "csvFile"
          type: "file"
          description: "Csv file to upload."
      responses:
        "401":
          description: "UNAUTHORIZED"
          schema:
            $ref: "#/definitions/ApiResponseError"
        "403":
          description: "FORBIDDEN"
          schema:
            $ref: "#/definitions/ApiResponseError"
        "500":
          description: "SERVER ERROR"
          schema:
            $ref: "#/definitions/ApiResponseError"
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/ModelForm"
  /sample:
    post:
      tags:
      - "Sample"
      summary:  "Upload a sample"
      consumes:
        - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
        - in: "formData"
          name: "dmoFile"
          type: "file"
          description: "DMO file to upload."
      responses:
        "500":
          description: "SERVER ERROR"
          schema:
            $ref: "#/definitions/ApiResponseError"
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/SampleDTO"
    get:
      tags:
      - "Sample"
      summary:  "get all samples"
      produces:
      - "application/json"
      responses:
        "500":
          description: "SERVER ERROR"
          schema:
            $ref: "#/definitions/ApiResponseError"
        "200":
          description: "OK"
          schema:
            items:
              type: "array"
              $ref: "#/definitions/SampleDTO"
  /sample/{id}:
    get:
      tags:
        - "Sample"
      summary:  "get a sample by id"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "mode id"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "401":
          description: "UNAUTHORIZED"
          schema:
            $ref: "#/definitions/ApiResponseError"
        "403":
          description: "FORBIDDEN"
          schema:
            $ref: "#/definitions/ApiResponseError"
        "500":
          description: "SERVER ERROR"
          schema:
            $ref: "#/definitions/ApiResponseError"
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/SampleDTO"          
  /employee:
    post:
      tags:
      - "Employee"
      summary:  "Create an employee"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/EmployeeForm"
      responses:
        "500":
          description: "SERVER ERROR"
          schema:
            $ref: "#/definitions/ApiResponseError"
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/EmployeeDTO"
    put:
      tags:
      - "Employee"
      summary:  "Update an employee"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/EmployeeDTO"
      responses:
        "500":
          description: "SERVER ERROR"
          schema:
            $ref: "#/definitions/ApiResponseError"
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/EmployeeDTO"
    get:
      tags:
      - "Employee"
      summary:  "get all employees"
      produces:
      - "application/json"
      responses:
        "500":
          description: "SERVER ERROR"
          schema:
            $ref: "#/definitions/ApiResponseError"
        "200":
          description: "OK"
          schema:
            items:
              type: "array"
              $ref: "#/definitions/EmployeeDTO"
definitions:
  LoginForm:
    type: "object"
    required:
    - "username"
    - "password"
    properties:
      vwId:
        type: "string"
        example: "123456789123 or 12345678912345"
      password:
        type: "string"
        example: "randomPassword"
  RoleDTO:
    type: "object"
    properties:
      name:
        type: "string"
        example: "adminstrator | inspector | consultant"
      admin:
        type: "boolean"
        example: true
  AuthenticationDTO:
    type: "object"
    properties:
      token:
        type: "string"
        example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIxMjM0NTY3ODkiLCJjdXJyZW50X3JvbGVzIjoiW3tcImlkXCI6MSxcIm5hbWVcIjpcIkFETUlOXCIsXCJhZG1pblwiOnRydWUsXCJhdXRob3JpdHlcIjpcIkFETUlOXCJ9XSIsImlzcyI6IkZBVVZfQVVUSEVOVElUT1IiLCJleHAiOjE2NzUyMzA1NzksImlhdCI6MTY3NTIxNjE3OX0.Pr_YzcJlzpDCQiDyucvwlFmg_6l5tlwxZlY5O7DPWDGl5SEJVblRUb5Svn0osx8sYpSvUZItM9jT9krLGp052g"
  UserForm:
    type: "object"
    properties:
      vwId:
        type: "string"
        example: "ABC123456"
      active:
        type: "boolean"
        example: true
      email: 
        type: "string"
        example: "igor@hotmail.com"
      roles:
            type: "array"
            items: 
              type: "string"
            example: ["adminstrator","inspector","consultant"]
  UserDTO:
    type: "object"
    properties:
      vwId:
        type: "string"
        example: "ABC123"
      active:
        type: "boolean"
        example: true
      roles:
        items:
            type: "array"
            $ref: "#/definitions/RoleDTO"
  PasswordDTO:
    type: "object"
    properties:
      password:
        type: "string"
        example: "ABC123"
      passwordConfirmation:
        type: "string"
        example: "ABC123"
  UnitForm:
    type: "object"
    properties:
      name:
        type: "string"
        example: "Anchieta"
      active:
        type: "boolean"
        example: true
  UnitDTO:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
        example: "Anchieta"
      active:
        type: "boolean"
        example: true
  EquipmentForm:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
        example: "AK12"
      active:
        type: "boolean"
        example: true
      unitId:
        type: "number"
        example: 1
  EquipmentDTO:
    type: "object"
    required:
    - "name"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "AK12"
      active:
        type: "boolean"
        example: true
      unit:
        type: "object"
        $ref: "#/definitions/UnitDTO"
  EquipmentFormWithId:
    type: "object"
    required:
    - "name"
    properties:
      id:
        type: "integer"
        example: 1
      name:
        type: "string"
        example: "AK12"
      active:
        type: "boolean"
        example: true
      unitId:
        type: "number"
        example: 1
  CarForm:
    type: "object"
    properties:
      name:
        type: "string"
        example: "Anchieta"
      active:
        type: "boolean"
        example: true
      unitId:
        type: "number"
        example: 1
  CarDTO:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
        example: "Anchieta"
      active:
        type: "boolean"
        example: true
      unit:
        type: "object"
        $ref: "#/definitions/UnitDTO"
  NominalAxisCoordinateForm:
    type: "object"
    properties:
      name:
        type: "string"
      lowerTolerance:
        type: "number"
        example: -125.321
      higherTolerance:
        type: "number"
        example: 125.321
      axis:
        enum:
           - "X"
           - "Y"
           - "Z"
           - "T"
           - "D"
           - "NOT RECOGNIZED"
        example: "X"
  NominalAxisCoordinateDTO:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      lowerTolerance:
        type: "number"
        example: -125.321
      higherTolerance:
        type: "number"
        example: 125.321
      axis:
        enum:
           - "X"
           - "Y"
           - "Z"
           - "T"
           - "D"
           - "NOT RECOGNIZED"
        example: "X"
      pmpId:
        type: "integer"
        format: "int64"        
  NominalPmpForm:
    type: "object"
    properties:
      name:
        type: "string"
        example: "PONTO A"
      axis:
        enum:
           - "X"
           - "Y"
           - "Z"
           - "T"
           - "D"
           - "NOT RECOGNIZED"
        example: "X"
      x:
        type: "number"
        example: -125.321
      y:
        type: "number"
        example: -125.321
      z:
        type: "number"
        example: -125.321
      active:
        type: "boolean"
        example: true
      axisCoordinateList:
        items:
          type: "array"
          $ref: "#/definitions/NominalAxisCoordinateForm"
  NominalPmpDTO:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "PONTO A"
      axis:
        enum:
           - "X"
           - "Y"
           - "Z"
           - "T"
           - "D"
           - "NOT RECOGNIZED"
        example: "X"
      x:
        type: "number"
        example: -125.321
      y:
        type: "number"
        example: -125.321
      z:
        type: "number"
        example: -125.321
      active:
        type: "boolean"
        example: true
      axisCoordinateList:
        items:
          type: "array"
          $ref: "#/definitions/NominalAxisCoordinateDTO"
  NominalFmForm:
    type: "object"
    properties:
      name:
        type: "string"
        example: "FM01"
      higherTolerance:
        type: "number"
        example: 123.321
      lowerTolerance:
        type: "number"
        example: 124.321
      defaultValue:
        type: "number"
        example: 124.321
      axis:
        enum:
           - "X"
           - "Y"
           - "Z"
           - "T"
           - "D"
           - "NOT RECOGNIZED"
        example: "X"
      catalogType:
        enum :
          - "GRUNDGEOMETRIE"
          - "DICHTIGKEIT"
          - "SYMMETRIEVERLAUF"
          - "UMRISS UND BÜNDIGKEIT"
          - "FMK PLUS"
        example: "GRUNDGEOMETRIE"
      pmpList:
        items:
          items: 
            type: "string"
            example: ["PONTO_1","PONTO_2","PONTO_3"]
      photo:
        type: "string"
        format: binary
      level:
        enum:
          - "LOW"
          - "MEDIUM"
          - "HIGH"
          - "CRITICAL"
      fmImpactList:
        items:
          type: "array"
          $ref: "#/definitions/FmDescriptionForm"
      active:
        type: "boolean"
        example: true
  NominalFmDTO:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 1
      name:
        type: "string"
        example: "FM01"
      higherTolerance:
        type: "number"
        example: 123.321
      lowerTolerance:
        type: "number"
        example: 124.321
      defaultValue:
        type: "number"
        example: 124.321
      axis:
        enum:
           - "X"
           - "Y"
           - "Z"
           - "T"
           - "D"
           - "NOT RECOGNIZED"
        example: "X"
      catalogType:
        enum :
          - "GRUNDGEOMETRIE"
          - "DICHTIGKEIT"
          - "SYMMETRIEVERLAUF"
          - "UMRISS UND BÜNDIGKEIT"
          - "FMK PLUS"
        example: "GRUNDGEOMETRIE"    
      pmpList:
        items:
          type: "array"
          $ref: "#/definitions/NominalPmpDTO"
      photo:
        type: "string"
        format: binary
      level:
        enum:
          - "LOW"
          - "MEDIUM"
          - "HIGH"
          - "CRITICAL"
      fmImpactList:
        items:
          type: "array"
          $ref: "#/definitions/FmDescriptionDTO"
      active:
        type: "boolean"
        example: true
  ModelForm:
    type: "object"
    properties:
      partNumber:
        type: "string"
        example: "SHD13NH4"
      stepDescription:
        type: "string"
        example: "SHD13NH4"
      car:
        type: "object"
        $ref: "#/definitions/CarDTO"
      pmpList:
        items:
          type: "array"
          $ref: "#/definitions/NominalPmpForm"
      fmList:
        items:
          type: "array"
          $ref: "#/definitions/NominalFmForm"
      active:
        type: "boolean"
        example: true
  ModelDTO:
    type: "object"
    properties:
      id:
        type: "integer"
        example: 1
      partNumber:
        type: "string"
        example: "SHD13NH4"
      stepDescription:
        type: "string"
        example: "SHD13NH4"
      car:
        type: "object"
        $ref: "#/definitions/CarDTO"
      pmpList:
        items:
          type: "array"
          $ref: "#/definitions/NominalPmpDTO"
      fmList:
        items:
          type: "array"
          $ref: "#/definitions/NominalFmDTO"
      active:
        type: "boolean"
        example: true
  MeasurementAxisCoordinateDTO:
    type: "object"
    properties:
      id:
        type: "integer"
        example: 1
      name:
        type: "string"
      axis:
        enum:
           - "X"
           - "Y"
           - "Z"
           - "T"
           - "D"
           - "NOT RECOGNIZED"
        example: "X"
      value:
        type: "number"
        example: -125.321
      toleranceType:
        enum:
          - "INTOL"
          - "OUTOL"
          - "NOT RECOGNIZED"
        example: "INTOL" 
  MeasurementPmpDTO:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "PONTO_1"
      x:
        type: "number"
        example: -125.321
      y:
        type: "number"
        example: -125.321
      z:
        type: "number"
        example: -125.321
      nominalPmpId:
        type: "number"
        example: 2
      measuremnetAxisCoordinateList:
        items:
          type: "array"
          $ref: "#/definitions/MeasurementAxisCoordinateDTO"
  MeasurementFmDTO:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      value:
        type: "number"
        example: -125.321 
      toleranceType:
        enum:
          - "INTOL"
          - "OUTOL"
          - "NOT RECOGNIZED"
        example: "INTOL"
      nominalFmId:
        type: "number"
        example: 2
  SampleDTO:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      uploadDate:
        type: "string"
        format: "2020-07-10 15:00:00"
        example: "2020-07-10 15:00:00 (year/month/day) hours:minutes:seconds"
      uploadUser:
        type: "object"
        $ref: "#/definitions/UserDTO"
      model:
        type: "object"
        $ref: "#/definitions/ModelDTO"
      equipment:
        type: "object"
        $ref: "#/definitions/EquipmentDTO"
      scan_init_date:
        type: "string"
        format: "2020-07-10 15:00:00.000"
        example: "2020-07-10 15:00:00 (year/month/day) hours:minutes:seconds"
      scan_end_date:
        type: "string"
        format: "2020-07-10 15:00:00.000"
        example: "2020-07-10 15:00:00 (year/month/day) hours:minutes:seconds"
      chassi:
        type: "string"
        example: "094I8MJF894KLOMF984"
      pmpSampleList:
        items:
          type: "array"
          $ref: "#/definitions/MeasurementPmpDTO"
      fmSampleList:
        items:
            type: "array"
            $ref: "#/definitions/MeasurementFmDTO"
      status:
        enum:
          - "SUCCESS"
          - "ERROR"
          - "WARNING"
        example: "SUCCESS"
  EmployeeDTO:
    type: "object"
    properties:
      id:
        type: "integer"
      vwId:
        type: "string"
        example: "12323dfff3"
      name:
        type: "string"
        example: "Igor Carvalho"
      email:
        type: "string"
        example: "123d1sed@vm.com"
      phone:
        type: "string"
        example: "(11) 98387383882"
      active:
        type: "boolean"
        example: true
  EmployeeForm:
    type: "object"
    properties:
      vwId:
        type: "string"
        example: "12323dfff3"
      name:
        type: "string"
        example: "Igor Carvalho"
      email:
        type: "string"
        example: "123d1sed@vm.com"
      phone:
        type: "string"
        example: "(11) 98387383882"
      active:
        type: "boolean"
        example: true
  EmployeeFormWithId:
    type: "object"
    properties:
      id:
        type: "integer"
        example: 1
      vwId:
        type: "string"
        example: "12323dfff3"
      name:
        type: "string"
        example: "Igor Carvalho"
      email:
        type: "string"
        example: "123d1sed@vm.com"
      phone:
        type: "string"
        example: "(11) 98387383882"
      active:
        type: "boolean"
        example: true
  FmDescriptionForm:
    type: "object"
    properties:
      info:
        type: "string"
        example: "Erro na porta"
  FmDescriptionDTO:
    type: "object"
    properties:
      id:
        type: "integer"
        example: 1
      info:
        type: "string"
        example: "Erro na porta"
  GraphicForm:
    type: "object"
    properties:
      start_date:
        type: "string"
        example: "10/10/2010"
      end_date:
        type: "string"
        example: "10/10/2010"
      carId:
        type: "number"
        example: 1
      equipmentId:
        type: "number"
        example: 1
  GraphicDTO:
    type: "object"
    properties:
      fmName:
        type: "string"
        example: "FM_001"
      catalogType:
        enum :
          - "GRUNDGEOMETRIE"
          - "DICHTIGKEIT"
          - "SYMMETRIEVERLAUF"
          - "UMRISS UND BÜNDIGKEIT"
          - "FMK PLUS"
        example: "GRUNDGEOMETRIE"   
      higherTolerance:
        type: "number"
        example: 2.7
      lowerTolerance:
        type: "number"
        example: -0.3
      nominalTolerance:
        type: "number"
        example: 1.2
      zoneDivision:
        type: "number"
        example: 0.5
      cp:
        type: "number"
        example: 0.5
      cpk:
        type: "number"
        example: 0.5
      pp:
        type: "number"
        example: 0.5
      ppk:
        type: "number"
        example: 0.5
      sigmaLevel:
        type: "number"
        example: 5.09
      normalDistribution:
        type: "string"
        example: "1.2%"
      average:
        type: "string"
        example: "2.5mm"
      standardDeviation:
        type: "string"
        example: "3.5mm"
      graphicMeasurementFmDTOList:
        items:
            type: "array"
            $ref: "#/definitions/GraphicMeasurementFmDTO"
      mappedPmpList:
        items:
            type: "array"
            $ref: "#/definitions/MeasurementPmpDTO"
      selectedFm:
        type: "object"
        $ref: "#/definitions/NominalFmDTO"
  GraphicMeasurementFmDTO:
    type: "object"
    properties:
      value:
        type: "number"
        example: 1.1
      scan_date:
        type: "string"
        example: "10/10/2010"
      toleranceType:
        enum:
          - "INTOL"
          - "OUTOL"
          - "NOT RECOGNIZED"
        example: "INTOL"
      ruleType:
        items:
          enum:
            - "OUTSIDE CONTROL LIMITS"
            - "PRESENCE OF CYCLES OR TRENDS"
            - "STRATIFICATION OR FAILURE OF VARIABILITY"
            - "SEQUENCE OF POINTS NEAR OF CONTROL LIMITS"
            - "SEQUENCE OF POINTS ON THE SAME SIDE OF THE MIDLINE"
          example: ["OUTSIDE CONTROL LIMITS","PRESENCE OF CYCLES OR TRENDS","STRATIFICATION OR FAILURE OF VARIABILITY"]
  ApiResponseError:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
        example: 401
      message:
        type: "string"
        example: "Invalid"